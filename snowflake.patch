diff --git a/client/snowflake.go b/client/snowflake.go
index f19afcf..5ab8ae5 100644
--- a/client/snowflake.go
+++ b/client/snowflake.go
@@ -1,8 +1,7 @@
 // Client transport plugin for the Snowflake pluggable transport.
-package main
+package snowflakeclient
 
 import (
-	"flag"
 	"io"
 	"io/ioutil"
 	"log"
@@ -23,6 +22,8 @@ const (
 	DefaultSnowflakeCapacity = 1
 )
 
+var sigChan = make(chan os.Signal, 1)
+
 // Exchanges bytes between two ReadWriters.
 // (In this case, between a SOCKS connection and a snowflake transport conn)
 func copyLoop(socks, sfconn io.ReadWriter) {
@@ -92,22 +93,15 @@ func socksAcceptLoop(ln *pt.SocksListener, transport *sf.Transport, shutdown cha
 	}
 }
 
-func main() {
-	iceServersCommas := flag.String("ice", "", "comma-separated list of ICE servers")
-	brokerURL := flag.String("url", "", "URL of signaling broker")
-	frontDomain := flag.String("front", "", "front domain")
-	logFilename := flag.String("log", "", "name of log file")
-	logToStateDir := flag.Bool("log-to-state-dir", false, "resolve the log file relative to tor's pt state dir")
-	keepLocalAddresses := flag.Bool("keep-local-addresses", false, "keep local LAN address ICE candidates")
-	unsafeLogging := flag.Bool("unsafe-logging", false, "prevent logs from being scrubbed")
-	max := flag.Int("max", DefaultSnowflakeCapacity,
-		"capacity for number of multiplexed WebRTC peers")
+// Start the Snowflake client.
+func Start(port *int, iceServersCommas, brokerURL, frontDomain, logFilename *string, logToStateDir, keepLocalAddresses, unsafeLogging *bool, max *int) {
+	if *max < DefaultSnowflakeCapacity {
+		*max = DefaultSnowflakeCapacity
+	}
 
 	// Deprecated
-	oldLogToStateDir := flag.Bool("logToStateDir", false, "use -log-to-state-dir instead")
-	oldKeepLocalAddresses := flag.Bool("keepLocalAddresses", false, "use -keep-local-addresses instead")
-
-	flag.Parse()
+	oldLogToStateDir := logToStateDir
+	oldKeepLocalAddresses := keepLocalAddresses
 
 	log.SetFlags(log.LstdFlags | log.LUTC)
 
@@ -116,7 +110,7 @@ func main() {
 	// buffer is full.
 	// https://bugs.torproject.org/26360
 	// https://bugs.torproject.org/25600#comment:14
-	var logOutput = ioutil.Discard
+	var logOutput = os.Stderr //ioutil.Discard
 	if *logFilename != "" {
 		if *logToStateDir || *oldLogToStateDir {
 			stateDir, err := pt.MakeStateDir()
@@ -164,7 +158,7 @@ func main() {
 		switch methodName {
 		case "snowflake":
 			// TODO: Be able to recover when SOCKS dies.
-			ln, err := pt.ListenSocks("tcp", "127.0.0.1:0")
+			ln, err := pt.ListenSocks("tcp", net.JoinHostPort("127.0.0.1", strconv.Itoa(*port)))
 			if err != nil {
 				pt.CmethodError(methodName, err.Error())
 				break
@@ -179,7 +173,6 @@ func main() {
 	}
 	pt.CmethodsDone()
 
-	sigChan := make(chan os.Signal, 1)
 	signal.Notify(sigChan, syscall.SIGTERM)
 
 	if os.Getenv("TOR_PT_EXIT_ON_STDIN_CLOSE") == "1" {
@@ -206,3 +199,8 @@ func main() {
 	wg.Wait()
 	log.Println("snowflake is done.")
 }
+
+func Stop() {
+	log.Println("synthesizing SIGTERM because of explicit Stop call")
+	sigChan <- syscall.SIGTERM
+}
diff --git a/proxy/proxy-go_test.go b/proxy/proxy-go_test.go
index e935ad9..303589c 100644
--- a/proxy/proxy-go_test.go
+++ b/proxy/proxy-go_test.go
@@ -1,4 +1,4 @@
-package main
+package snowflakeproxy
 
 import (
 	"bytes"
diff --git a/proxy/snowflake.go b/proxy/snowflake.go
index 86ae0b2..894d035 100644
--- a/proxy/snowflake.go
+++ b/proxy/snowflake.go
@@ -1,10 +1,9 @@
-package main
+package snowflakeproxy
 
 import (
 	"bytes"
 	"crypto/rand"
 	"encoding/base64"
-	"flag"
 	"fmt"
 	"io"
 	"io/ioutil"
@@ -176,6 +175,12 @@ func getToken() {
 }
 
 func retToken() {
+	defer func() {
+		if r := recover(); r != nil {
+			// Recover if tokens got closed. That's ok, we're just getting stopped.
+		}
+	}()
+
 	tokens <- true
 }
 
@@ -528,22 +533,22 @@ func runSession(sid string) {
 	}
 }
 
-func main() {
-	var capacity uint
-	var stunURL string
-	var logFilename string
-	var rawBrokerURL string
-	var unsafeLogging bool
-	var keepLocalAddresses bool
-
-	flag.UintVar(&capacity, "capacity", 10, "maximum concurrent clients")
-	flag.StringVar(&rawBrokerURL, "broker", defaultBrokerURL, "broker URL")
-	flag.StringVar(&relayURL, "relay", defaultRelayURL, "websocket relay URL")
-	flag.StringVar(&stunURL, "stun", defaultSTUNURL, "stun URL")
-	flag.StringVar(&logFilename, "log", "", "log filename")
-	flag.BoolVar(&unsafeLogging, "unsafe-logging", false, "prevent logs from being scrubbed")
-	flag.BoolVar(&keepLocalAddresses, "keep-local-addresses", false, "keep local LAN address ICE candidates")
-	flag.Parse()
+func Start(capacity uint, rawBrokerURL, relayURL, stunURL, logFilename string, unsafeLogging, keepLocalAddresses bool) {
+	if capacity < 1 {
+		capacity = 10
+	}
+
+	if rawBrokerURL == "" {
+		rawBrokerURL = defaultBrokerURL
+	}
+
+	if relayURL == "" {
+		relayURL = defaultRelayURL
+	}
+
+	if stunURL == "" {
+		stunURL = defaultSTUNURL
+	}
 
 	var logOutput io.Writer = os.Stderr
 	log.SetFlags(log.LstdFlags | log.LUTC)
@@ -598,13 +603,16 @@ func main() {
 	checkNATType(config, defaultProbeURL)
 	log.Printf("NAT type: %s", currentNATType)
 
-	for {
-		getToken()
+	for range tokens {
 		sessionID := genSessionID()
 		runSession(sessionID)
 	}
 }
 
+func Stop() {
+	close(tokens)
+}
+
 func checkNATType(config webrtc.Configuration, probeURL string) {
 
 	var err error
diff --git a/proxy/util.go b/proxy/util.go
index d737056..d63d5d0 100644
--- a/proxy/util.go
+++ b/proxy/util.go
@@ -1,4 +1,4 @@
-package main
+package snowflakeproxy
 
 import (
 	"fmt"
